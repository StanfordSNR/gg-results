// GGHASH:VL6Lr8LQ4mQHAvzOvxZCNVClcN.6cDUr5Vmf7ysA0pg80000a78e
#ifndef _GLIBCXX_VARIANT
#define _GLIBCXX_VARIANT 1
#if __cplusplus >= 201703L
#include <type_traits>
#include <utility>
#include <bits/enable_special_members.h>
#include <bits/functexcept.h>
#include <bits/move.h>
#include <bits/functional_hash.h>
#include <bits/invoke.h>
#include <ext/aligned_buffer.h>
#include <bits/parse_numbers.h>
#include <bits/stl_iterator_base_types.h>
#include <bits/stl_iterator_base_funcs.h>
#include <bits/stl_construct.h>
#define __cpp_lib_variant 201603
#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP,__NAME) template<typename _Variant, size_t _Np> constexpr bool __erased_ ##__NAME(const _Variant& __lhs, const _Variant& __rhs) { return __get<_Np>(std::forward<_Variant>(__lhs)) __OP __get<_Np>(std::forward<_Variant>(__rhs)); }
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP,__NAME) template<typename... _Types> constexpr bool operator __OP(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs) { return __lhs._M_ ##__NAME(__rhs, std::index_sequence_for<_Types...>{}); } constexpr bool operator __OP(monostate, monostate) noexcept { return 0 __OP 0; }
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP,__NAME) template<size_t... __indices> static constexpr bool (*_S_erased_ ##__NAME[])(const variant&, const variant&) = { &__detail::__variant::__erased_ ##__NAME< const variant&, __indices>... }; template<size_t... __indices> constexpr inline bool _M_ ##__NAME(const variant& __rhs, std::index_sequence<__indices...>) const { auto __lhs_index = this->index(); auto __rhs_index = __rhs.index(); if (__lhs_index != __rhs_index || valueless_by_exception()) return __lhs_index + 1 __OP __rhs_index + 1; return _S_erased_ ##__NAME<__indices...>[__lhs_index](*this, __rhs); }
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
#if _GLIBCXX_INLINE_VERSION
#endif
#if _GLIBCXX_INLINE_VERSION
#endif
#define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) template<typename... _Tp> friend constexpr bool operator __OP(const variant<_Tp...>& __lhs, const variant<_Tp...>& __rhs);
#undef _VARIANT_RELATION_FUNCTION_TEMPLATE
#endif
#endif
