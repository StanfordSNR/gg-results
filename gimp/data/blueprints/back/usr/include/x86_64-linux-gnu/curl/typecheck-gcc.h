// GGHASH:VTph617DktSdQWgTt14TR0j17LSEWmUhBECF9HtTnBpU0000a5fc
#ifndef __CURL_TYPECHECK_GCC_H
#define __CURL_TYPECHECK_GCC_H 
#define curl_easy_setopt(handle,option,value) __extension__ ({ __typeof__(option) _curl_opt = option; if(__builtin_constant_p(_curl_opt)) { if(_curl_is_long_option(_curl_opt)) if(!_curl_is_long(value)) _curl_easy_setopt_err_long(); if(_curl_is_off_t_option(_curl_opt)) if(!_curl_is_off_t(value)) _curl_easy_setopt_err_curl_off_t(); if(_curl_is_string_option(_curl_opt)) if(!_curl_is_string(value)) _curl_easy_setopt_err_string(); if(_curl_is_write_cb_option(_curl_opt)) if(!_curl_is_write_cb(value)) _curl_easy_setopt_err_write_callback(); if((_curl_opt) == CURLOPT_READFUNCTION) if(!_curl_is_read_cb(value)) _curl_easy_setopt_err_read_cb(); if((_curl_opt) == CURLOPT_IOCTLFUNCTION) if(!_curl_is_ioctl_cb(value)) _curl_easy_setopt_err_ioctl_cb(); if((_curl_opt) == CURLOPT_SOCKOPTFUNCTION) if(!_curl_is_sockopt_cb(value)) _curl_easy_setopt_err_sockopt_cb(); if((_curl_opt) == CURLOPT_OPENSOCKETFUNCTION) if(!_curl_is_opensocket_cb(value)) _curl_easy_setopt_err_opensocket_cb(); if((_curl_opt) == CURLOPT_PROGRESSFUNCTION) if(!_curl_is_progress_cb(value)) _curl_easy_setopt_err_progress_cb(); if((_curl_opt) == CURLOPT_DEBUGFUNCTION) if(!_curl_is_debug_cb(value)) _curl_easy_setopt_err_debug_cb(); if((_curl_opt) == CURLOPT_SSL_CTX_FUNCTION) if(!_curl_is_ssl_ctx_cb(value)) _curl_easy_setopt_err_ssl_ctx_cb(); if(_curl_is_conv_cb_option(_curl_opt)) if(!_curl_is_conv_cb(value)) _curl_easy_setopt_err_conv_cb(); if((_curl_opt) == CURLOPT_SEEKFUNCTION) if(!_curl_is_seek_cb(value)) _curl_easy_setopt_err_seek_cb(); if(_curl_is_cb_data_option(_curl_opt)) if(!_curl_is_cb_data(value)) _curl_easy_setopt_err_cb_data(); if((_curl_opt) == CURLOPT_ERRORBUFFER) if(!_curl_is_error_buffer(value)) _curl_easy_setopt_err_error_buffer(); if((_curl_opt) == CURLOPT_STDERR) if(!_curl_is_FILE(value)) _curl_easy_setopt_err_FILE(); if(_curl_is_postfields_option(_curl_opt)) if(!_curl_is_postfields(value)) _curl_easy_setopt_err_postfields(); if((_curl_opt) == CURLOPT_HTTPPOST) if(!_curl_is_arr((value), struct curl_httppost)) _curl_easy_setopt_err_curl_httpost(); if((_curl_opt) == CURLOPT_MIMEPOST) if(!_curl_is_ptr((value), curl_mime)) _curl_easy_setopt_err_curl_mimepost(); if(_curl_is_slist_option(_curl_opt)) if(!_curl_is_arr((value), struct curl_slist)) _curl_easy_setopt_err_curl_slist(); if((_curl_opt) == CURLOPT_SHARE) if(!_curl_is_ptr((value), CURLSH)) _curl_easy_setopt_err_CURLSH(); } curl_easy_setopt(handle, _curl_opt, value); })
#define curl_easy_getinfo(handle,info,arg) __extension__ ({ __typeof__(info) _curl_info = info; if(__builtin_constant_p(_curl_info)) { if(_curl_is_string_info(_curl_info)) if(!_curl_is_arr((arg), char *)) _curl_easy_getinfo_err_string(); if(_curl_is_long_info(_curl_info)) if(!_curl_is_arr((arg), long)) _curl_easy_getinfo_err_long(); if(_curl_is_double_info(_curl_info)) if(!_curl_is_arr((arg), double)) _curl_easy_getinfo_err_double(); if(_curl_is_slist_info(_curl_info)) if(!_curl_is_arr((arg), struct curl_slist *)) _curl_easy_getinfo_err_curl_slist(); if(_curl_is_tlssessioninfo_info(_curl_info)) if(!_curl_is_arr((arg), struct curl_tlssessioninfo *)) _curl_easy_getinfo_err_curl_tlssesssioninfo(); if(_curl_is_certinfo_info(_curl_info)) if(!_curl_is_arr((arg), struct curl_certinfo *)) _curl_easy_getinfo_err_curl_certinfo(); if(_curl_is_socket_info(_curl_info)) if(!_curl_is_arr((arg), curl_socket_t)) _curl_easy_getinfo_err_curl_socket(); if(_curl_is_off_t_info(_curl_info)) if(!_curl_is_arr((arg), curl_off_t)) _curl_easy_getinfo_err_curl_off_t(); } curl_easy_getinfo(handle, _curl_info, arg); })
#define curl_share_setopt(share,opt,param) curl_share_setopt(share,opt,param)
#define curl_multi_setopt(handle,opt,param) curl_multi_setopt(handle,opt,param)
#define _CURL_WARNING(id,message) static void __attribute__((__warning__(message))) __attribute__((__unused__)) __attribute__((__noinline__)) id(void) { __asm__(""); }
#define _curl_is_long_option(option) (0 < (option) && (option) < CURLOPTTYPE_OBJECTPOINT)
#define _curl_is_off_t_option(option) ((option) > CURLOPTTYPE_OFF_T)
#define _curl_is_string_option(option) ((option) == CURLOPT_ABSTRACT_UNIX_SOCKET || (option) == CURLOPT_ACCEPT_ENCODING || (option) == CURLOPT_CAINFO || (option) == CURLOPT_CAPATH || (option) == CURLOPT_COOKIE || (option) == CURLOPT_COOKIEFILE || (option) == CURLOPT_COOKIEJAR || (option) == CURLOPT_COOKIELIST || (option) == CURLOPT_CRLFILE || (option) == CURLOPT_CUSTOMREQUEST || (option) == CURLOPT_DEFAULT_PROTOCOL || (option) == CURLOPT_DNS_INTERFACE || (option) == CURLOPT_DNS_LOCAL_IP4 || (option) == CURLOPT_DNS_LOCAL_IP6 || (option) == CURLOPT_DNS_SERVERS || (option) == CURLOPT_EGDSOCKET || (option) == CURLOPT_FTPPORT || (option) == CURLOPT_FTP_ACCOUNT || (option) == CURLOPT_FTP_ALTERNATIVE_TO_USER || (option) == CURLOPT_INTERFACE || (option) == CURLOPT_ISSUERCERT || (option) == CURLOPT_KEYPASSWD || (option) == CURLOPT_KRBLEVEL || (option) == CURLOPT_LOGIN_OPTIONS || (option) == CURLOPT_MAIL_AUTH || (option) == CURLOPT_MAIL_FROM || (option) == CURLOPT_NETRC_FILE || (option) == CURLOPT_NOPROXY || (option) == CURLOPT_PASSWORD || (option) == CURLOPT_PINNEDPUBLICKEY || (option) == CURLOPT_PRE_PROXY || (option) == CURLOPT_PROXY || (option) == CURLOPT_PROXYPASSWORD || (option) == CURLOPT_PROXYUSERNAME || (option) == CURLOPT_PROXYUSERPWD || (option) == CURLOPT_PROXY_CAINFO || (option) == CURLOPT_PROXY_CAPATH || (option) == CURLOPT_PROXY_CRLFILE || (option) == CURLOPT_PROXY_KEYPASSWD || (option) == CURLOPT_PROXY_PINNEDPUBLICKEY || (option) == CURLOPT_PROXY_SERVICE_NAME || (option) == CURLOPT_PROXY_SSLCERT || (option) == CURLOPT_PROXY_SSLCERTTYPE || (option) == CURLOPT_PROXY_SSLKEY || (option) == CURLOPT_PROXY_SSLKEYTYPE || (option) == CURLOPT_PROXY_SSL_CIPHER_LIST || (option) == CURLOPT_PROXY_TLSAUTH_PASSWORD || (option) == CURLOPT_PROXY_TLSAUTH_USERNAME || (option) == CURLOPT_PROXY_TLSAUTH_TYPE || (option) == CURLOPT_RANDOM_FILE || (option) == CURLOPT_RANGE || (option) == CURLOPT_REFERER || (option) == CURLOPT_RTSP_SESSION_ID || (option) == CURLOPT_RTSP_STREAM_URI || (option) == CURLOPT_RTSP_TRANSPORT || (option) == CURLOPT_SERVICE_NAME || (option) == CURLOPT_SOCKS5_GSSAPI_SERVICE || (option) == CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 || (option) == CURLOPT_SSH_KNOWNHOSTS || (option) == CURLOPT_SSH_PRIVATE_KEYFILE || (option) == CURLOPT_SSH_PUBLIC_KEYFILE || (option) == CURLOPT_SSLCERT || (option) == CURLOPT_SSLCERTTYPE || (option) == CURLOPT_SSLENGINE || (option) == CURLOPT_SSLKEY || (option) == CURLOPT_SSLKEYTYPE || (option) == CURLOPT_SSL_CIPHER_LIST || (option) == CURLOPT_TLSAUTH_PASSWORD || (option) == CURLOPT_TLSAUTH_TYPE || (option) == CURLOPT_TLSAUTH_USERNAME || (option) == CURLOPT_UNIX_SOCKET_PATH || (option) == CURLOPT_URL || (option) == CURLOPT_USERAGENT || (option) == CURLOPT_USERNAME || (option) == CURLOPT_USERPWD || (option) == CURLOPT_XOAUTH2_BEARER || 0)
#define _curl_is_write_cb_option(option) ((option) == CURLOPT_HEADERFUNCTION || (option) == CURLOPT_WRITEFUNCTION)
#define _curl_is_conv_cb_option(option) ((option) == CURLOPT_CONV_TO_NETWORK_FUNCTION || (option) == CURLOPT_CONV_FROM_NETWORK_FUNCTION || (option) == CURLOPT_CONV_FROM_UTF8_FUNCTION)
#define _curl_is_cb_data_option(option) ((option) == CURLOPT_CHUNK_DATA || (option) == CURLOPT_CLOSESOCKETDATA || (option) == CURLOPT_DEBUGDATA || (option) == CURLOPT_FNMATCH_DATA || (option) == CURLOPT_HEADERDATA || (option) == CURLOPT_INTERLEAVEDATA || (option) == CURLOPT_IOCTLDATA || (option) == CURLOPT_OPENSOCKETDATA || (option) == CURLOPT_PRIVATE || (option) == CURLOPT_PROGRESSDATA || (option) == CURLOPT_READDATA || (option) == CURLOPT_SEEKDATA || (option) == CURLOPT_SOCKOPTDATA || (option) == CURLOPT_SSH_KEYDATA || (option) == CURLOPT_SSL_CTX_DATA || (option) == CURLOPT_WRITEDATA || 0)
#define _curl_is_postfields_option(option) ((option) == CURLOPT_POSTFIELDS || (option) == CURLOPT_COPYPOSTFIELDS || 0)
#define _curl_is_slist_option(option) ((option) == CURLOPT_HTTP200ALIASES || (option) == CURLOPT_HTTPHEADER || (option) == CURLOPT_MAIL_RCPT || (option) == CURLOPT_POSTQUOTE || (option) == CURLOPT_PREQUOTE || (option) == CURLOPT_PROXYHEADER || (option) == CURLOPT_QUOTE || (option) == CURLOPT_RESOLVE || (option) == CURLOPT_TELNETOPTIONS || 0)
#define _curl_is_string_info(info) (CURLINFO_STRING < (info) && (info) < CURLINFO_LONG)
#define _curl_is_long_info(info) (CURLINFO_LONG < (info) && (info) < CURLINFO_DOUBLE)
#define _curl_is_double_info(info) (CURLINFO_DOUBLE < (info) && (info) < CURLINFO_SLIST)
#define _curl_is_slist_info(info) (((info) == CURLINFO_SSL_ENGINES) || ((info) == CURLINFO_COOKIELIST))
#define _curl_is_tlssessioninfo_info(info) (((info) == CURLINFO_TLS_SSL_PTR) || ((info) == CURLINFO_TLS_SESSION))
#define _curl_is_certinfo_info(info) ((info) == CURLINFO_CERTINFO)
#define _curl_is_socket_info(info) (CURLINFO_SOCKET < (info) && (info) < CURLINFO_OFF_T)
#define _curl_is_off_t_info(info) (CURLINFO_OFF_T < (info))
#define _curl_is_any_ptr(expr) (sizeof(expr) == sizeof(void *))
#define _curl_is_NULL(expr) (__builtin_types_compatible_p(__typeof__(expr), __typeof__(NULL)))
#define _curl_is_ptr(expr,type) (_curl_is_NULL(expr) || __builtin_types_compatible_p(__typeof__(expr), type *) || __builtin_types_compatible_p(__typeof__(expr), const type *))
#define _curl_is_arr(expr,type) (_curl_is_ptr((expr), type) || __builtin_types_compatible_p(__typeof__(expr), type []))
#define _curl_is_string(expr) (_curl_is_arr((expr), char) || _curl_is_arr((expr), signed char) || _curl_is_arr((expr), unsigned char))
#define _curl_is_long(expr) (__builtin_types_compatible_p(__typeof__(expr), long) || __builtin_types_compatible_p(__typeof__(expr), signed long) || __builtin_types_compatible_p(__typeof__(expr), unsigned long) || __builtin_types_compatible_p(__typeof__(expr), int) || __builtin_types_compatible_p(__typeof__(expr), signed int) || __builtin_types_compatible_p(__typeof__(expr), unsigned int) || __builtin_types_compatible_p(__typeof__(expr), short) || __builtin_types_compatible_p(__typeof__(expr), signed short) || __builtin_types_compatible_p(__typeof__(expr), unsigned short) || __builtin_types_compatible_p(__typeof__(expr), char) || __builtin_types_compatible_p(__typeof__(expr), signed char) || __builtin_types_compatible_p(__typeof__(expr), unsigned char))
#define _curl_is_off_t(expr) (__builtin_types_compatible_p(__typeof__(expr), curl_off_t))
#define _curl_is_error_buffer(expr) (_curl_is_NULL(expr) || __builtin_types_compatible_p(__typeof__(expr), char *) || __builtin_types_compatible_p(__typeof__(expr), char[]))
#if 0
#define _curl_is_cb_data(expr) (_curl_is_ptr((expr), void) || _curl_is_ptr((expr), FILE))
#else
#define _curl_is_cb_data(expr) _curl_is_any_ptr(expr)
#endif
#define _curl_is_FILE(expr) (_curl_is_NULL(expr) || (__builtin_types_compatible_p(__typeof__(expr), FILE *)))
#define _curl_is_postfields(expr) (_curl_is_ptr((expr), void) || _curl_is_arr((expr), char))
#define _curl_callback_compatible(func,type) (__builtin_types_compatible_p(__typeof__(func), type) || __builtin_types_compatible_p(__typeof__(func) *, type))
#define _curl_is_read_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), __typeof__(fread) *) || _curl_callback_compatible((expr), curl_read_callback) || _curl_callback_compatible((expr), _curl_read_callback1) || _curl_callback_compatible((expr), _curl_read_callback2) || _curl_callback_compatible((expr), _curl_read_callback3) || _curl_callback_compatible((expr), _curl_read_callback4) || _curl_callback_compatible((expr), _curl_read_callback5) || _curl_callback_compatible((expr), _curl_read_callback6))
#define _curl_is_write_cb(expr) (_curl_is_read_cb(expr) || _curl_callback_compatible((expr), __typeof__(fwrite) *) || _curl_callback_compatible((expr), curl_write_callback) || _curl_callback_compatible((expr), _curl_write_callback1) || _curl_callback_compatible((expr), _curl_write_callback2) || _curl_callback_compatible((expr), _curl_write_callback3) || _curl_callback_compatible((expr), _curl_write_callback4) || _curl_callback_compatible((expr), _curl_write_callback5) || _curl_callback_compatible((expr), _curl_write_callback6))
#define _curl_is_ioctl_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_ioctl_callback) || _curl_callback_compatible((expr), _curl_ioctl_callback1) || _curl_callback_compatible((expr), _curl_ioctl_callback2) || _curl_callback_compatible((expr), _curl_ioctl_callback3) || _curl_callback_compatible((expr), _curl_ioctl_callback4))
#define _curl_is_sockopt_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_sockopt_callback) || _curl_callback_compatible((expr), _curl_sockopt_callback1) || _curl_callback_compatible((expr), _curl_sockopt_callback2))
#define _curl_is_opensocket_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_opensocket_callback) || _curl_callback_compatible((expr), _curl_opensocket_callback1) || _curl_callback_compatible((expr), _curl_opensocket_callback2) || _curl_callback_compatible((expr), _curl_opensocket_callback3) || _curl_callback_compatible((expr), _curl_opensocket_callback4))
#define _curl_is_progress_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_progress_callback) || _curl_callback_compatible((expr), _curl_progress_callback1) || _curl_callback_compatible((expr), _curl_progress_callback2))
#define _curl_is_debug_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_debug_callback) || _curl_callback_compatible((expr), _curl_debug_callback1) || _curl_callback_compatible((expr), _curl_debug_callback2) || _curl_callback_compatible((expr), _curl_debug_callback3) || _curl_callback_compatible((expr), _curl_debug_callback4) || _curl_callback_compatible((expr), _curl_debug_callback5) || _curl_callback_compatible((expr), _curl_debug_callback6) || _curl_callback_compatible((expr), _curl_debug_callback7) || _curl_callback_compatible((expr), _curl_debug_callback8))
#define _curl_is_ssl_ctx_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_ssl_ctx_callback) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback1) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback2) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback3) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback4) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback5) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback6) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback7) || _curl_callback_compatible((expr), _curl_ssl_ctx_callback8))
#ifdef HEADER_SSL_H
#else
#endif
#define _curl_is_conv_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_conv_callback) || _curl_callback_compatible((expr), _curl_conv_callback1) || _curl_callback_compatible((expr), _curl_conv_callback2) || _curl_callback_compatible((expr), _curl_conv_callback3) || _curl_callback_compatible((expr), _curl_conv_callback4))
#define _curl_is_seek_cb(expr) (_curl_is_NULL(expr) || _curl_callback_compatible((expr), curl_seek_callback) || _curl_callback_compatible((expr), _curl_seek_callback1) || _curl_callback_compatible((expr), _curl_seek_callback2))
#endif
