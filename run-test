#!/usr/bin/env python3

import os
import sys
import base64
import time
import subprocess as sub

from urllib.parse import urlencode
from urllib.request import Request, urlopen

from contextlib import contextmanager

def debug(*args):
    print('\u2192', *args, file=sys.stderr)

def send_alert(message):
    access_id = os.environ['TWILIO_ACCESS_ID']
    secret_id = os.environ['TWILIO_SECRET_ID']

    url = 'https://api.twilio.com/2010-04-01/Accounts/{}/Messages.json'.format(access_id)

    post_fields = {
        'To': '+16692256066',
        'From': '+16505572929',
        'Body': message
    }

    authentication = "{}:{}".format(access_id, secret_id)
    base64string = base64.b64encode(authentication.encode('utf-8'))

    request = Request(url, urlencode(post_fields).encode())
    request.add_header("Authorization", "Basic %s" % base64string.decode('ascii'))

    urlopen(request).read()

@contextmanager
def pushd(new_dir):
    prev_dir = os.getcwd()
    debug('chdir to', new_dir)
    os.chdir(new_dir)
    yield
    debug('chdir back to', prev_dir)
    os.chdir(prev_dir)

DEFAULT_ENV = os.environ.copy()
ROOT_DIR = os.path.abspath(os.path.dirname(__file__))
RESULTS_DIR = os.path.join(ROOT_DIR, 'results')

def usage(argv0):
    print("{} <program-name> <test-name> [repeat-count=10]".format(argv0))

def prepare_folders(program_name, test_name):
    path = os.path.join(RESULTS_DIR, program_name, test_name)

    if os.path.exists(path):
        raise Exception("Experiment folder already exists, remove manually.")

    os.makedirs(path, exist_ok=False)
    return path

def run_tests(program_name, test_name, repeat_count):
    result_path = prepare_folders(program_name, test_name)
    program_path = os.path.join(ROOT_DIR, program_name)
    build_path = os.path.join(program_path, 'build')

    test_command = '../test-{name}.sh'.format(name=test_name)

    test_type = 'MAKE'

    if 'gg-' in test_name:
        test_type = 'GG'
    elif 'icecc-' in test_name:
        test_type = 'ICECC'
    elif 'ccache-' in test_name:
        test_type = 'CCACHE'

    if not os.path.exists(program_name):
        raise Exception("program not found")

    with pushd(program_path):
        for run_index in range(repeat_count):
            debug('running preparation script {program}#{test} ({num}/{total})'.format(
                program=program_name, test=test_name, num=run_index+1, total=repeat_count))

            env = DEFAULT_ENV.copy()

            env['__TEST_TYPE'] = test_type

            sub.check_call(["./1-prepare.sh"], stderr=sub.DEVNULL, stdout=sub.DEVNULL, env=env)

            debug('running test {program}#{test} ({num}/{total})'.format(
                program=program_name, test=test_name, num=run_index+1, total=repeat_count))

            env = DEFAULT_ENV.copy()

            env['TIMECOMMAND'] = '/usr/bin/time --output={output} --verbose'.format(
                output=os.path.join(result_path, '{}.log'.format(run_index)))
            env['TIMECOMMAND_PREP0'] = '/usr/bin/time --output={output} --verbose'.format(
                output=os.path.join(result_path, '{}-prep0.log'.format(run_index)))
            env['TIMECOMMAND_PREP1'] = '/usr/bin/time --output={output} --verbose'.format(
                output=os.path.join(result_path, '{}-prep1.log'.format(run_index)))
            env['TIMECOMMAND_PREP2'] = '/usr/bin/time --output={output} --verbose'.format(
                output=os.path.join(result_path, '{}-prep2.log'.format(run_index)))
            env['TIMECOMMAND_PREP3'] = '/usr/bin/time --output={output} --verbose'.format(
                output=os.path.join(result_path, '{}-prep3.log'.format(run_index)))

            try:
                sub.check_call([test_command], stderr=sub.DEVNULL, stdout=sub.DEVNULL, env=env, cwd=build_path)
                time.sleep(30)
            except:
                debug('test failed')
                try:
                    os.rename(os.path.join(result_path, '{}.log'.format(run_index)),
                              os.path.join(result_path, '{}.log.failed'.format(run_index)))
                except:
                    pass


def main():
    program_name = sys.argv[1]
    test_name = sys.argv[2]
    repeat_count = int(sys.argv[3]) if len(sys.argv) == 4 else 10

    run_tests(program_name, test_name, repeat_count)

if __name__ == '__main__':
    if len(sys.argv) == 0:
        os.abort()

    if len(sys.argv) < 3 or len(sys.argv) > 4:
        usage(sys.argv[0])
        sys.exit(1)

    debug('chdir to', ROOT_DIR)
    os.chdir(ROOT_DIR)

    try:
        main()
    except Exception as ex:
        send_alert('Test failed: {}#{}\nException: {}'.format(sys.argv[1], sys.argv[2], str(ex)))
        raise
